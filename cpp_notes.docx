1. Reverse sort a vector i.e. sort in Descending Order: 
sort(a.begin(), a.end(), greater<T>()); 
Better Alternative: 
sort(a.rbegin(), a.rend()); 

2. Empty a vector: 
myvector.clear(); 

3. Delete a particular element from vector: 
vectorname.erase(position) 
eg. it = myvector.begin(); 
    myvector.erase(it); 

4. Printing a vector: 
for (auto it = myvector.begin(); it != myvector.end(); ++it) 
        cout << ' ' << *it; 

5. Deleting the last element of vector: 
myvector.pop_back(); 

6. Sorting vector of pairs in descending order of first element: 
sort(v.rbegin(), v.rend()); 

7. We have predefined stack Structure in C++ STL. No need to create one using struct. Similarly queue is also predefined in C++ STL. 

Note: Binary Search works only on sorted input. 

8. stack (STL): 
member functions: empty(), size(), top(), push(g), pop(), swap(), emplace(). 

stack::swap() - This function is used to swap the contents of one stack with another stack of same type but the size may vary. 
stackname1.swap(stackname2) 

stack::emplace() - This function is used to insert a new element into the stack container, the new element is added on top of the stack. It is same as push_back() in vector. 

9. deque (STL): double ended queues - sequence containers with feature of expansion and contraction on both ends. They are similar to vectors, but are more efficient in case of insertion and deletion of elements. Unlike vectors, contiguous storage allocation may not be guaranteed. 

Additional functions are: 
push_front(g); pop_front(g) 

10. std::vector::insert() is a built-in function in C++ STL which inserts new elements at the specified position, effectively increasing the container size by the number of elements inserted. 
vector_name.insert (position, val); 

So, by using insert() and erase(), insertion and deletion resp can be done anywhere in vector. 

with insert() we can insert multiple elements at a time Eg. 
vec.insert(vec.begin() + 2, { 30, 40, 50, 60 }); 

11. queue (STL) - pop(), front(), back(), push(g), emplace(g), swap(). 

12. heap (STL) - 
methods: make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap(), is_heap_until() 
make_heap() :- This function is used to convert a range in a container to a heap. 
front() :- This function displays the first element of heap which is the maximum number. 
push_heap() :- This function is used to insert elements into heap. The size of the heap is increased by 1. New element is placed appropriately in the heap. 
pop_heap() :- This function is used to delete the maximum element of the heap. The size of heap is decreased by 1. The heap elements are reorganised accordingly after this operation. 
sort_heap() :- This function is used to sort the heap. After this operation, the container is no longer a heap. 
is_heap_until() :- This function returns the iterator to the position till the container is the heap. Generally, in most implementations, the reverse sorted container is considered as heap. 

13. assign() in vector 
vector<int>v; v.assign(n, 0); // assign all n elements of vector v as zero. 

14. memset() for arrays 
bool visited[n]; memset(visited, false, sizeof(visited)); // shall set all elements of visited array to false

15. set<int> s; // This refers to a sorted set in C++. Elements are by default sorted in ascending order here.
We can use functions like binary_search(), upper_bound(), lower_bound() on set.
Remember, these above functions should be used only on an ordered container.
Insertion Time Comp: O(log n). Search: O(log n)

16. unordered_set<int> s; // elements are inserted in random order.
Search time: O(1) average, O(n) worst case.
Use it, when we need to keep a set of distinct elements and no ordering is required.

17. binary_search():
vector<int> v; // v is filled with some elements
bool present = binary_search(v.begin(), v.end(), 12); // will work only if v is sorted.

18. lower_bound(): (>=) greater than or equal to 
Will return the iterator to first occurence of elt greater than or equal to passed elt.
auto it = lower_bound(v.begin(), v.end(), 100);

19. upper_bound(): (>) strictly greater than
Will return iterator to first occurence of element strictly greater than passed element.
// eg v = {2, 3, 11, 14, 100, 100, 100, 112};
auto it2 = upper_bound(v.begin(), v.end(), 100);
cout << *it2 << endl; // 112
cout << *(it-1) << “ “ << *it << endl; // 14 100

20. If we want a set to have elements stored in Descending order:
set<int, greater<int>> s; inserting 20, 30, 10, 60, 40, 50
order of elements in s: 60 50 40 30 20 10
We can traverse a set similarly as vector:
for(auto it = s.begin(); it != s.end(); it++)
	cout << *it << “ “;
cout << endl;

removing an elt from set: s.erase(int val); // deletes the element with the given value. If no such element present, doesn’t do anything.
lower_bound(int g), upper_bound(int g): in set only value must be passed of which we want lower and upper bound resp.
Eg. s : 10 20 30 40 50 60
*s.lower_bound(40); // 40 (>=40)
*s.upper_bound(50); // 60 (> 50)

21. count():
vector<int> v;
int mycount = count(v.begin(), v.end(), 12); // counts the number of items in range [first, last) that equals to value. 
With set s; s.count(int val); can also be used with unordered_set.

22. find(key k) method in map: returns an iterator to position where key is present in map.

23. unordered_map: Search, insertion, deletion: Average O(1) time; 
worst O(n) time.

24. map(ordered): Search, insertion, deletion: ~~ O(log n) time

25. use std::map when a. You need ordered data. b. You would have to print/access the data in sorted order. c. You need predecessor/ successor of elements.

26. use std::unordered_map when a. You need to keep count of some data and no ordering is needed. b. Single elt access needed(no traversal).

27. unordered_map vs unordered_set: In unordered_set, we have only key, no value. They are mainly used to check presence/ absence of an elt in set. Eg. Consider the problem of counting frequencies of individual elts. We can’t use unordered_set/ set as we can’t store count via it. 

28. Note that: iterator to an elt works as a pointer. Eg. For getting value of elt. *(it). In case of map, iterator itr: itr->first and itr->second; 

29. Set is like a subset of maps. It only has keys and no values.

30. There is an inbuilt function for computing gcd in C++.
_gcd(int a, int b);

31. Sorting Algorithms: QBSIMHRBCT
Quick, Bubble, Selection, Insertion, Merge, Heap, Radix, Bucket, Counting and Topological sort.

Bubble Sort: n-1 passes. In each pass, j varies from 0 to <n-1-i.

Selection Sort: Finding the min elt and inserting at pos 0. Then, out of rem elts finding min and inserting at pos 1 and so on. No extra space required. 

Insertion Sort: Comparing pos0 and pos1 elt and then swapping if required. At each value of i, we keep arr[0 ... i] as our sorted array and rem unsorted.

Algorithm
Best Case
Average Case
Worst case
Quick Sort
Ω(n log(n))
Θ(n log(n))
O(n^2)
Bubble Sort
Ω(n)
Θ(n^2)
O(n^2)
Merge Sort
Ω(n log(n))
Θ(n log(n))
O(n log(n))
Insertion Sort
Ω(n)
Θ(n^2)
O(n^2)
Selection Sort
Ω(n^2)
Θ(n^2)
O(n^2)
Heap Sort
Ω(n log(n))
Θ(n log(n))
O(n log(n))
Radix Sort
Ω(nk)
Θ(nk)
O(nk)
Bucket Sort
Ω(n+k)
Θ(n+k)
O(n^2)

32. Finding max_elt and min_elt of a vector:
auto it = std::max_element(v.begin(), v.end());
max_elt = *it;

auto it2 = std::min_element(v.begin(), v.end());
min_elt = *it2;
33. To do customize sorting in vector: For, example 31 and 310.
If arranged as 31310 then a bigger no is formed instead of arranging as 31031. So, pass as third argument to sort() function a bool function. 

bool compareNum(string s1, string s2){
	return s1 + s2 > s2 + s1;
}

sort(A.begin(), A.end(), compareNum);

34. String methods:
int strchr(string s, int c): returns a pointer to last occurence of a character c in string s.

int strcmp(string s1, string s2): Compares two strings lexicographically.

reverse(): to reverse a string. 
reverse(str.begin(), str.end());

35. We can pass min() and max() methods more than 2 arguments also.
Eg. int mn = min({a, b, c, d}); 

36. bool next_permutation(arr.begin(), arr.end()): returns true if it is possible to return a lexicographically greater permutation of given array of values.

Similarly, 
bool prev_permutation(arr.begin(), arr.end()): returns true if prev permutation of given array of values is possible.

36. On a grid of A x B, if you are initially at point (0,0) and you want to reach (A-1, B-1) i.e. from topmost left corner to bottommost right corner: Number of possible ways are: lcm (l chose m). 
int l = (A+B-2); int m = min(A, B)-1;

37. To calculate num of occurences of an elt in sorted array of integers:
Method 1:
bool b = binary_search(A.begin(), A.end(), target);
if(!b)
	return 0; // target not found

int mn = upper_bound(A.begin(), A.end(), target-1) – A.begin();
int mx = lower_bound(A.begin(), A.end(), target+1) – A.begin();
return mx – mn;

Method 2: (implementing from scratch):


int binary_search(int arr[], int n, int target, bool searchFirst){
	int l = 0, r = n-1, result = -1;
	while(l <= r){
		int mid = (l+r)/2;
		if(arr[mid] == target){
			result = mid;
			if(searchFirst)	
				r = mid – 1;
			else l = mid+1;
		}
		else if(arr[mid] < target)
			l = mid+1;
		else r = mid-1;
	}
	return result;
}

int mn = binary_search(arr, n, target, true); // will return index to first occurence of target
if(mn == -1) 
	return mn;

int mx = binary_search(arr, n, target, false); // will return index to last occurence of target

int result = mx – mn + 1;

38. Bit Manipulation:
x = x & (x-1); // will unset the last set bit of x.
X & ~(x-1) // will extract the lowest set bit of x.
X = x|(x+1) // will set the lowest cleared bit of x.
X = x | ~(x+1) // will extract the lowest cleared bit of x. All others are clear.

39. String methods:
int isalnum(int c): returns 1 if char c is alnum else returns 0.
int isalpha(int c): returns 1 if char c is alphabet else returns 0.

to convert entire string to tolowercase:
transform(s.begin(), s.end(), s.begin(), ::tolower);

similarly toupper.
To convert a char to lowercase:
int tolower(int c): returns lower case version of character c.

40. 3 Sum leetcode: Using two pointers
vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> answer;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        if(n < 3)
            return answer;
        
        for(int i = 0; i < n-2; i++)
        {
            if(i > 0 && nums[i] == nums[i-1])
                continue;
            int low = i+1;
            int high = n-1;
            
            while(low < high)
            {
                int sum = nums[i] + nums[low] + nums[high];
                if(sum == 0)
                {
                    answer.push_back({nums[i], nums[low], 							nums[high]});
                    
                    while(low < high && nums[low] == nums[low+1])
                        low++;
                    
                    while(low < high && nums[high] == nums[high-													1])
                        high--;
                    
                    low++;
                    high--;
                }
                
                else if(sum < 0)
                    low++;
                
                else high--;
            }
        }
        
        return answer;
    }

41. In Backtracking problems on arrays or strings: pass path vector by address.
While in backtracking problems on trees: pass path vector as a copy and not the original one cause it would get really difficult to pop_back() an element in this case.

42. In STL, max_heaps are implemented as priority_queue<int, container>
container can be vector<int> or set<int> etc.
For creating min heap: priority_queue<int, container, greater<int>>

Operations: 
push(): O(log n)
pop(): O(log n)
top(): O(1)
size: O(1)
Node at index i:
Left child at index 2i + 1
Right child at index 2i + 2
It’s parent at index floor(i/2).
Heaps also obey the property of almost complete binary tree.
header file for priority queues: #include<queue>
max_heap: For every node i, the value of node is less than or equal to the value of it’s parent node. i.e. A[parent[i]] >= A[i]. Root is the maximum node.

min_heap: For every node i, the value of node is greater than or to equal to value of it’s parent node. A[i] >= A[parent[i]]. Root is the minimum node.

custom sorting function:
return type bool
if func evaluates to true then pair a will be placed before pair b in our container
bool compare(pair<int, int> a, pair<int, int> b)
{
    return (a.second < b.second) || (a.second == b.second && a.first > b.first);
}


// Find the element with occurence more than floor(n/2) in array
// we shall use Moore Algorithm:
// Time Complexity: O(n)
// space Complexity: O(1)
int moore(const vector<int> &nums)
{
    int majorityIndex = 0;
    int n = nums.size();
    int count = 1;
    for(int i = 1; i < n; i++)
    {
        nums[i] == nums[majorityIndex] ? count++ : count--;
        if(count == 0)
        {
            majorityIndex = i;
            count = 1;
        }
    }
    return nums[majorityIndex];
}
